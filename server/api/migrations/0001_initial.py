#  Copyright 2024 Anthony Miceli and contributors. This file is part of LingoLessons.
#  LingoLessons is free software: you can redistribute it and/or modify it under the terms of the
#  GNU General Public License as published by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#  LingoLessons is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License along with LingoLessons.
#  If not, see <https://www.gnu.org/licenses/>.

# Generated by Django 5.0.6 on 2024-06-03 01:43
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
import emoji
import os
from django.contrib.auth.models import User
from django.utils import timezone


# def create_superuser(apps, schema_editor):
#     User.objects.create_superuser(
#         username=os.environ.get('ADMIN_NAME', "admin"),
#         email=None,
#         password=os.environ.get('ADMIN_PASSWORD', "admin"),
#         last_login=timezone.now()
#     )


# def populate_data(apps, schema_editor):
#     languages = [
#         ('en', ':United_Kingdom:'),
#         ('en_US', ':United_States:'),
#         ('ja', ':Japan:'),
#         ('es', ':Spain:'),
#         ('fr', ':France:'),
#         ('it', ':Italy:'),
#         ('de', ':Germany:'),
#         ('ko', ':South_Korea:'),
#         ('zh', ':China:'),
#         ('hi', ':India:'),
#         ('pt', ':Portugal:'),
#         ('ru', ':Russia:'),
#         ('id', ':Indonesia:')
#     ]
#     language = apps.get_model('api', 'Language')
#     for lang in languages:
#         obj = language(
#             code=lang[0],
#             flag=emoji.emojize(lang[1])
#         )
#         obj.save()


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5)),
                ('flag', models.CharField(max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fact', models.CharField(max_length=255)),
                ('type', models.IntegerField(choices=[(1, 'Vocabulary'), (2, 'Grammar')], default=1)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.language')),
            ],
        ),
        migrations.CreateModel(
            name='Fact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='element1',
                                               to='api.element')),
                ('element2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='element2',
                                               to='api.element')),
            ],
        ),
        migrations.CreateModel(
            name='LessonFact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hint', models.CharField(blank=True, default='', max_length=255)),
                ('fact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.fact')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.lesson')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='language',
            index=models.Index(fields=['code'], name='api_languag_code_58f42f_idx'),
        ),
        migrations.RenameField(
            model_name='element',
            old_name='fact',
            new_name='value',
        ),
        migrations.AddField(
            model_name='lesson',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_owner',
                                    to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='lessonfact',
            name='fact',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.fact'),
        ),
        migrations.RemoveField(
            model_name='lessonfact',
            name='lesson',
        ),
        migrations.RemoveField(
            model_name='lessonfact',
            name='owner',
        ),
        migrations.AlterField(
            model_name='element',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language',
                                    to='api.language'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='facts',
            field=models.ManyToManyField(related_name='lesson_facts', to='api.lessonfact'),
        ),
        migrations.RemoveField(
            model_name='fact',
            name='element1',
        ),
        migrations.RemoveField(
            model_name='fact',
            name='element2',
        ),
        migrations.AddField(
            model_name='fact',
            name='elements',
            field=models.ManyToManyField(to='api.element'),
        ),
    ]
